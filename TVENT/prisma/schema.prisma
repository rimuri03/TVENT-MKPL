generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admin {
  id            Int             @id @default(autoincrement())
  email         String?         @db.VarChar(255)
  password      String?         @db.VarChar(255)
  admin_session admin_session[]
}

model event {
  id                  Int               @id @default(autoincrement())
  nama_event          String            @db.VarChar(255)
  deskripsi_event     String?           @db.Text
  poster_event        String            @db.VarChar(255)
  penyelenggara_event String            @db.VarChar(255)
  benefit_event       String?           @db.Text
  kepanitiaan_mulai   DateTime          @default(now()) @db.Timestamp(0)
  kepanitiaan_selesai DateTime          @default(now()) @db.Timestamp(0)
  klasifikasi_divisi  String?           @db.Text
  event_mulai         DateTime          @default(now()) @db.Timestamp(0)
  event_selesai       DateTime          @default(now()) @db.Timestamp(0)
  email_event         String?           @db.VarChar(255)
  status              event_status?
  created_at          DateTime          @default(now()) @db.Timestamp(0)
  user_nim            String?           @db.VarChar(20)
  user                user?             @relation(fields: [user_nim], references: [nim], onDelete: Cascade, onUpdate: Restrict, map: "event_ibfk_1")
  user_registered     user_registered[]

  @@index([user_nim], map: "user_nim")
}

model user {
  nim             String            @id @db.VarChar(20)
  nama_depan      String?           @db.VarChar(255)
  nama_belakang   String?           @db.VarChar(255)
  email           String            @unique(map: "email") @db.VarChar(255)
  phone           String            @db.VarChar(15)
  password        String            @db.VarChar(255)
  fakultas        String            @db.VarChar(255)
  program_studi   String            @db.VarChar(255)
  gender          user_gender
  created_at      DateTime          @default(now()) @db.Timestamp(0)
  event           event[]
  user_registered user_registered[]
  user_session    user_session[]
}

model user_registered {
  id          Int      @id @default(autoincrement())
  user_nim    String?  @db.VarChar(20)
  event_id    Int?
  alasan_join String?  @db.Text
  cv          String?  @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(0)
  user        user?    @relation(fields: [user_nim], references: [nim], onDelete: Cascade, onUpdate: Restrict, map: "user_registered_ibfk_1")
  event       event?   @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_registered_ibfk_2")
  divisi      String?  @db.VarChar(255)
  status      usreg_status?
  jabatan     String?  @db.VarChar(255)

  @@index([event_id], map: "event_id")
  @@index([user_nim], map: "user_nim")
}

model admin_session {
  id       String @id @db.VarChar(255)
  admin_id Int?
  admin    admin? @relation(fields: [admin_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "admin_session_ibfk_1")

  @@index([admin_id], map: "admin_id")
}

model user_session {
  id       String  @id @db.VarChar(255)
  user_nim String? @db.VarChar(20)
  user     user?   @relation(fields: [user_nim], references: [nim], onDelete: Cascade, onUpdate: Restrict, map: "user_session_ibfk_1")

  @@index([user_nim], map: "user_nim")
}

enum user_gender {
  L
  P
}

enum event_status {
  PENDING @map("PENDING")
  REJECTED
  ACCEPTED
}

enum usreg_status{
  REJECTED 
  ACCEPTED
}
